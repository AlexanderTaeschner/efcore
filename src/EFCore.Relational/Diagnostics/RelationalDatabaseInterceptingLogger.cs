// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;
using JetBrains.Annotations;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Utilities;
using Microsoft.Extensions.Logging;

namespace Microsoft.EntityFrameworkCore.Diagnostics
{
    /// <summary>
    ///     <para>
    ///         Routes log messages from interceptors to the delegate registered with <see cref="DatabaseFacade.Log" />.
    ///     </para>
    ///     <para>
    ///         In this implementation, log messages are generated by calling <see cref="EventData.ToString" />, which
    ///         creates the same messages as are logged to an <see cref="ILogger" />.
    ///     </para>
    /// </summary>
    public class RelationalDatabaseInterceptingLogger : IDbCommandInterceptor
    {
        /// <summary>
        ///     Constructs a new instance of <see cref="RelationalDatabaseInterceptingLogger" /> to route
        ///     log messages at or more severe than the given level to the given delegate.
        /// </summary>
        /// <param name="action"> The delegate to which log messages will be sent. </param>
        /// <param name="level"> The log level to filter by. Only events at or more severe than this level will be logged. </param>
        public RelationalDatabaseInterceptingLogger(
            [NotNull] Action<string> action,
            LogLevel level)
        {
            Check.NotNull(action, nameof(action));

            Action = action;
            Level = level;
        }

        /// <summary>
        ///     The delegate to which log messages will be sent.
        /// </summary>
        protected virtual Action<string> Action { get; }

        /// <summary>
        ///     The log level to filter by. Only events at or more severe than this level will be logged.
        /// </summary>
        protected virtual LogLevel Level { get; }

        /// <summary>
        ///     Logs the command just before <see cref="DbCommand.ExecuteReader()" /> is called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The current result, or null if no result yet exists. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual InterceptionResult<DbDataReader>? ReaderExecuting(
            DbCommand command,
            CommandEventData eventData,
            InterceptionResult<DbDataReader>? result)
        {
            Log(eventData);

            return result;
        }

        /// <summary>
        ///     Logs the command just before <see cref="DbCommand.ExecuteScalar()" /> is called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The current result, or null if no result yet exists. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual InterceptionResult<object>? ScalarExecuting(
            DbCommand command,
            CommandEventData eventData,
            InterceptionResult<object>? result)
        {
            Log(eventData);

            return result;
        }

        /// <summary>
        ///     Logs the command just before <see cref="DbCommand.ExecuteNonQuery()" /> is called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The current result, or null if no result yet exists. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual InterceptionResult<int>? NonQueryExecuting(
            DbCommand command,
            CommandEventData eventData,
            InterceptionResult<int>? result)
        {
            Log(eventData);

            return result;
        }

        /// <summary>
        ///     Logs the command just before <see cref="DbCommand.ExecuteReaderAsync()" /> is called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The current result, or null if no result yet exists. </param>
        /// <param name="cancellationToken"> The cancellation token. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual Task<InterceptionResult<DbDataReader>?> ReaderExecutingAsync(
            DbCommand command,
            CommandEventData eventData,
            InterceptionResult<DbDataReader>? result,
            CancellationToken cancellationToken = default)
        {
            Log(eventData);

            return Task.FromResult(result);
        }

        /// <summary>
        ///     Logs the command just before <see cref="DbCommand.ExecuteScalarAsync()" /> is called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The current result, or null if no result yet exists. </param>
        /// <param name="cancellationToken"> The cancellation token. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual Task<InterceptionResult<object>?> ScalarExecutingAsync(
            DbCommand command,
            CommandEventData eventData,
            InterceptionResult<object>? result,
            CancellationToken cancellationToken = default)
        {
            Log(eventData);

            return Task.FromResult(result);
        }

        /// <summary>
        ///     Logs the command just before <see cref="DbCommand.ExecuteNonQueryAsync()" /> is called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The current result, or null if no result yet exists. </param>
        /// <param name="cancellationToken"> The cancellation token. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual Task<InterceptionResult<int>?> NonQueryExecutingAsync(
            DbCommand command,
            CommandEventData eventData,
            InterceptionResult<int>? result,
            CancellationToken cancellationToken = default)
        {
            Log(eventData);

            return Task.FromResult(result);
        }

        /// <summary>
        ///     Logs the command just after <see cref="DbCommand.ExecuteReader()" /> has been called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The result of executing the <see cref="DbCommand" />. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual DbDataReader ReaderExecuted(
            DbCommand command,
            CommandExecutedEventData eventData,
            DbDataReader result)
        {
            Log(eventData);

            return result;
        }

        /// <summary>
        ///     Logs the command just after <see cref="DbCommand.ExecuteScalar()" /> has been called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The result of executing the <see cref="DbCommand" />. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual object ScalarExecuted(
            DbCommand command,
            CommandExecutedEventData eventData,
            object result)
        {
            Log(eventData);

            return result;
        }

        /// <summary>
        ///     Logs the command just after <see cref="DbCommand.ExecuteNonQuery()" /> has been called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The result of executing the <see cref="DbCommand" />. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual int NonQueryExecuted(
            DbCommand command,
            CommandExecutedEventData eventData,
            int result)
        {
            Log(eventData);

            return result;
        }

        /// <summary>
        ///     Logs the command just after <see cref="DbCommand.ExecuteReaderAsync()" /> has been called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The result of executing the <see cref="DbCommand" />. </param>
        /// <param name="cancellationToken"> The cancellation token. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual Task<DbDataReader> ReaderExecutedAsync(
            DbCommand command,
            CommandExecutedEventData eventData,
            DbDataReader result,
            CancellationToken cancellationToken = default)
        {
            Log(eventData);

            return Task.FromResult(result);
        }

        /// <summary>
        ///     Logs the command just after <see cref="DbCommand.ExecuteScalarAsync()" /> has been called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The result of executing the <see cref="DbCommand" />. </param>
        /// <param name="cancellationToken"> The cancellation token. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual Task<object> ScalarExecutedAsync(
            DbCommand command,
            CommandExecutedEventData eventData,
            object result,
            CancellationToken cancellationToken = default)
        {
            Log(eventData);

            return Task.FromResult(result);
        }

        /// <summary>
        ///     Logs the command just after <see cref="DbCommand.ExecuteNonQueryAsync()" /> has been called.
        /// </summary>
        /// <param name="command"> The command. </param>
        /// <param name="eventData"> Contextual information about the command and execution. </param>
        /// <param name="result"> The result of executing the <see cref="DbCommand" />. </param>
        /// <param name="cancellationToken"> The cancellation token. </param>
        /// <returns> The <paramref name="result" /> value passed in. </returns>
        public virtual Task<int> NonQueryExecutedAsync(
            DbCommand command,
            CommandExecutedEventData eventData,
            int result,
            CancellationToken cancellationToken = default)
        {
            Log(eventData);

            return Task.FromResult(result);
        }

        private void Log(EventData eventData)
        {
            if (eventData?.LogLevel >= Level)
            {
                Action(eventData.ToString());
            }
        }
    }
}
